generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String         @id @default(cuid())
    email         String?        @unique
    emailVerified DateTime?
    image         String?

    accounts      Account[]
    sessions      Session[]

    role          String         @default("user")
    businesses    Business[]

    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    deletedAt     DateTime?
}

model Business {
    id           String                  @id @default(cuid())
    name         String                  @unique

    user         User                    @relation(fields: [userId], references: [id])
    userId       String

    distributors BusinessDistributor[]
    invoices     Invoice[]

    createdAt    DateTime                @default(now())
    updatedAt    DateTime                @updatedAt
    deletedAt    DateTime?
}

model Distributor {
    id           String                  @id @default(cuid())
    name         String
    email        String
    address      String
    city         String
    state        String
    postalCode   String
    paymentTerms Int

    businesses   BusinessDistributor[]
    products     Product[]
    invoices     Invoice[]

    createdAt    DateTime                @default(now())
    updatedAt    DateTime                @updatedAt
    deletedAt    DateTime?
}

model BusinessDistributor {
    business      Business    @relation(fields: [businessId], references: [id])
    businessId    String

    distributor   Distributor @relation(fields: [distributorId], references: [id])
    distributorId String

    @@id([businessId, distributorId])
    @@unique([businessId, distributorId])
}

model Product {
    id            String           @id @default(cuid())
    name          String
    price         Decimal

    distributor   Distributor      @relation(fields: [distributorId], references: [id])
    distributorId String

    invoiceItem   InvoiceItem[]

    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    deletedAt     DateTime?
}

model Invoice {
    id            String           @id @default(cuid())
    dueBy         DateTime
    status        InvoiceStatus    @default(UNPAID)
    items         InvoiceItem[]

    business      Business         @relation(fields: [businessId], references: [id])
    businessId    String

    distributor   Distributor      @relation(fields: [distributorId], references: [id])
    distributorId String

    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    deletedAt     DateTime?
}

model InvoiceItem {
    id        String       @id @default(cuid())
    name      String
    price     Decimal
    quantity  Int

    invoice   Invoice   @relation(fields: [invoiceId], references: [id])
    invoiceId String

    product   Product   @relation(fields: [productId], references: [id])
    productId String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

enum InvoiceStatus {
    PAID
    UNPAID
}